@using System.Security.Claims
@model ASP_P15.Models.Shop.ShopPageModel
@{
    ViewData["Title"] = "Shop";
    bool isAdmin = Context.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value == "Admin";

}

<div class="text-center">
    <h1 class="display-4">Крамниця</h1>
</div>

@foreach (var grp in Model.ProductGroups)
{
    @Html.DisplayFor(m => grp)
}


@if (isAdmin)
{
    <hr />
    <form enctype="multipart/form-data" method="post" id="shop-group-form">
        <div class="row">
            <div class="col col-6">
                <div class="input-group mb-3">
                    <span class="input-group-text" id="name-addon"><i class="bi bi-body-text"></i></span>
                    @{
                        String nameClass = Model.ValidationErrors == null ? String.Empty :
                        Model.ValidationErrors?[nameof(Model.GroupFormModel.Name)] == null ? "is-valid" : "is-invalid";
                    }
                    <input name="group-name" type="text" class="form-control @nameClass" placeholder="Назва групи" aria-label="Назва групи" aria-describedby="name-addon">
                    @if (!String.IsNullOrEmpty(Model.ValidationErrors?[nameof(Model.GroupFormModel.Name)]))
                    {
                        <div class="invalid-feedback">
                            @Model.ValidationErrors?[nameof(Model.GroupFormModel.Name)]
                        </div>
                    }
                    else if (Model.ValidationErrors != null && Model.ValidationErrors[nameof(Model.GroupFormModel.Name)] == null)
                    {
                        <div class="valid-feedback">Поле заповнено правильно</div>
                    }
                </div>
            </div>
            <div class="col col-6">
                <div class="input-group mb-3">
                    <span class="input-group-text" id="description-addon"><i class="bi bi-person-vcard"></i></span>
                    @{
                        String descriptionClass = Model.ValidationErrors == null ? String.Empty :
                        Model.ValidationErrors?[nameof(Model.GroupFormModel.Description)] == null ? "is-valid" : "is-invalid";
                    }
                    <textarea name="group-description" class="form-control @descriptionClass" placeholder="Опис" aria-label="Опис" aria-describedby="description-addon"></textarea>
                    @if (!String.IsNullOrEmpty(Model.ValidationErrors?[nameof(Model.GroupFormModel.Description)]))
                    {
                        <div class="invalid-feedback">
                            @Model.ValidationErrors?[nameof(Model.GroupFormModel.Description)]
                        </div>
                    }
                    else if (Model.ValidationErrors != null && Model.ValidationErrors[nameof(Model.GroupFormModel.Description)] == null)
                    {
                        <div class="valid-feedback">Поле заповнено правильно</div>
                    }
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col col-6">
                <div class="input-group mb-3">
                    <label class="input-group-text" for="inputGroupFile01"><i class="bi bi-diagram-2"></i></label>
                    <input name="group-picture" type="file" class="form-control" id="inputGroupFile01">
                </div>
            </div>
            <div class="col col-6">
                <div class="input-group mb-3">
                    <span class="input-group-text" id="slug-addon"><i class="bi bi-body-text"></i></span>
                    @{
                        String slugClass = Model.ValidationErrors == null ? String.Empty :
                        Model.ValidationErrors?[nameof(Model.GroupFormModel.Slug)] == null ? "is-valid" : "is-invalid";
                    }
                    <input name="group-slug" type="text" class="form-control @slugClass" placeholder="Slug групи" aria-describedby="slug-addon">
                    @if (!String.IsNullOrEmpty(Model.ValidationErrors?[nameof(Model.GroupFormModel.Slug)]))
                    {
                        <div class="invalid-feedback">
                            @Model.ValidationErrors?[nameof(Model.GroupFormModel.Slug)]
                        </div>
                    }
                    else if (Model.ValidationErrors != null && Model.ValidationErrors[nameof(Model.GroupFormModel.Slug)] == null)
                    {
                        <div class="valid-feedback">Поле заповнено правильно</div>
                    }
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col col-6">
                <button type="submit" class="btn btn-outline-secondary">Додати</button>
            </div>
        </div>
    </form>
    <hr />
    <form enctype="multipart/form-data" method="post" id="shop-product-form">
        <div class="row">
            <div class="col col-6">
                <div class="input-group mb-3">
                    <span class="input-group-text" id="name-addon"><i class="bi bi-body-text"></i></span>
                    @{
                        String productNameClass = Model.ValidationErrors == null ? String.Empty : Model.ValidationErrors?[nameof(Model.FormModel.Name)] == null ? "is-valid" : "is-invalid";
                    }
                    <input name="product-name" type="text" class="form-control @productNameClass" placeholder="Назва товару" aria-label="Назва товару" aria-describedby="name-addon">
                    @if (!String.IsNullOrEmpty(Model.ValidationErrors?[nameof(Model.FormModel.Name)]))
                    {
                        <div id="validationServerUsernameFeedback" class="invalid-feedback">
                            @Model.ValidationErrors?[nameof(Model.FormModel.Name)]
                        </div>
                    }
                    else if (Model.ValidationErrors != null && Model.ValidationErrors[nameof(Model.FormModel.Name)] == null)
                    {
                        <div class="valid-feedback">Поле заповнено правильно</div>
                    }
                </div>
            </div>
            <div class="col col-6">
                <div class="input-group mb-3">
                    <span class="input-group-text" id="description-addon"><i class="bi bi-person-vcard"></i></span>
                    @{
                        String productDescriptionClass = Model.ValidationErrors == null ? String.Empty : Model.ValidationErrors?[nameof(Model.FormModel.Description)] == null ? "is-valid" : "is-invalid";
                    }
                    <textarea name="product-description" class="form-control @productDescriptionClass" placeholder="Опис" aria-label="Опис" aria-describedby="description-addon"></textarea>
                    @if (!String.IsNullOrEmpty(Model.ValidationErrors?[nameof(Model.FormModel.Description)]))
                    {
                        <div class="invalid-feedback">
                            @Model.ValidationErrors?[nameof(Model.FormModel.Description)]
                        </div>
                    }
                    else if (Model.ValidationErrors != null && Model.ValidationErrors[nameof(Model.FormModel.Description)] == null)
                    {
                        <div class="valid-feedback">Поле заповнено правильно</div>
                    }
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col col-6">
                <div class="input-group mb-3">
                    <span class="input-group-text" id="price-addon"><i class="bi bi-body-text"></i></span>
                    @{
                        String productPriceClass = Model.ValidationErrors == null ? String.Empty : Model.ValidationErrors?[nameof(Model.FormModel.Price)] == null ? "is-valid" : "is-invalid";
                    }
                    <input name="product-price" type="number" class="form-control @productPriceClass" placeholder="Ціна товару" aria-label="Ціна товару" aria-describedby="price-addon">
                    @if (!String.IsNullOrEmpty(Model.ValidationErrors?[nameof(Model.FormModel.Price)]))
                    {
                        <div class="invalid-feedback">
                            @Model.ValidationErrors?[nameof(Model.FormModel.Price)]
                        </div>
                    }
                    else if (Model.ValidationErrors != null && Model.ValidationErrors[nameof(Model.FormModel.Price)] == null)
                    {
                        <div class="valid-feedback">Поле заповнено правильно</div>
                    }
                </div>
            </div>
            <div class="col col-6">
                <div class="input-group mb-3">
                    <span class="input-group-text" id="amount-addon"><i class="bi bi-person-vcard"></i></span>
                    @{
                        String productAmountClass = Model.ValidationErrors == null ? String.Empty : Model.ValidationErrors?[nameof(Model.FormModel.Amount)] == null ? "is-valid" : "is-invalid";
                    }
                    <input name="product-amount" type="number" class="form-control @productAmountClass" placeholder="Кіл-ть товару" aria-label="Кіл-ть товару" aria-describedby="amount-addon">
                    @if (!String.IsNullOrEmpty(Model.ValidationErrors?[nameof(Model.FormModel.Amount)]))
                    {
                        <div class="invalid-feedback">
                            @Model.ValidationErrors?[nameof(Model.FormModel.Amount)]
                        </div>
                    }
                    else if (Model.ValidationErrors != null && Model.ValidationErrors[nameof(Model.FormModel.Amount)] == null)
                    {
                        <div class="valid-feedback">Поле заповнено правильно</div>
                    }
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col col-6">
                <div class="input-group mb-3">
                    <label class="input-group-text" for="inputGroupSelect01">Група</label>
                    @{
                        String productGroupClass = Model.ValidationErrors == null ? String.Empty : Model.ValidationErrors?[nameof(Model.FormModel.GroupId)] == null ? "is-valid" : "is-invalid";
                    }
                    <select name="group-id" class="form-select @productGroupClass" id="inputGroupSelect01">
                        @foreach (var grp in Model.ProductGroups)
                        {
                            <option value="@(grp.Id)">@grp.Name (@grp.Description)</option>
                        }
                    </select>
                    @if (!String.IsNullOrEmpty(Model.ValidationErrors?[nameof(Model.FormModel.GroupId)]))
                    {
                        <div class="invalid-feedback">
                            @Model.ValidationErrors?[nameof(Model.FormModel.GroupId)]
                        </div>
                    }
                    else if (Model.ValidationErrors != null && Model.ValidationErrors[nameof(Model.FormModel.GroupId)] == null)
                    {
                        <div class="valid-feedback">Поле заповнено правильно</div>
                    }
                </div>
            </div>
            <div class="col col-6">
                <div class="input-group mb-3">
                    <span class="input-group-text" id="slug-addon"><i class="bi bi-person-vcard"></i></span>
                    @{
                        String productSlugClass = Model.ValidationErrors == null ? String.Empty : Model.ValidationErrors?[nameof(Model.FormModel.Slug)] == null ? "is-valid" : "is-invalid";
                    }
                    <input name="product-slug" type="text" class="form-control @productSlugClass" placeholder="Slug товару" aria-label="Slug товару" aria-describedby="slug-addon">
                    @if (!String.IsNullOrEmpty(Model.ValidationErrors?[nameof(Model.FormModel.Slug)]))
                    {
                        <div class="invalid-feedback">
                            @Model.ValidationErrors?[nameof(Model.FormModel.Slug)]
                        </div>
                    }
                    else if (Model.ValidationErrors != null && Model.ValidationErrors[nameof(Model.FormModel.Slug)] == null)
                    {
                        <div class="valid-feedback">Поле заповнено правильно</div>
                    }
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col col-6">
                <div class="input-group mb-3">
                    <label class="input-group-text" for="inputGroupFile01"><i class="bi bi-diagram-2"></i></label>
                    <input name="product-picture" type="file" class="form-control" id="inputGroupFile01">
                </div>
            </div>
            <div class="col col-6">
                <button type="submit" class="btn btn-outline-secondary">Додати</button>
            </div>
        </div>
    </form>

}
@*  Д.З. Продовжити роботу з відновлення видалених користувачів.
    * Зробити верстку "картки" для групи товарів

    Система маршрутизації
    Home/Shop/[Group]

    Shop/Group/[Group]
    Shop/Product/[ID]
*@